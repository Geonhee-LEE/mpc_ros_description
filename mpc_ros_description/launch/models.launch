<launch>

    <!--  ************** GAZEBO Simulator ***************  -->
    <arg name="x_pos" default="0.0"/>
    <arg name="y_pos" default="0.0"/>
    <arg name="z_pos" default="0.0"/>
    <arg name="roll" default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="yaw" default="-1.507"/> 
    <arg name="model"  default="differential_drive" doc="opt: differential_drive, ackermann, bicycle, holonomic"/> 

    <!--  ************** Robot model ***************  -->
    <param name="robot_description" command="$(find xacro)/xacro.py $(find mpc_ros_description)/urdf/diff/differential_bot.urdf.xacro" if="$(eval model == 'differential_drive')"/>
    <param name="robot_description" command="$(find xacro)/xacro.py $(find mpc_ros_description)/urdf/ackermann/ackermann.urdf.xacro" if="$(eval model == 'ackermann')"/>
    <param name="robot_description" command="$(find xacro)/xacro.py $(find mpc_ros_description)/urdf/bicycle/bicycle_bot.urdf.xacro" if="$(eval model == 'bicycle')"/>
    <param name="robot_description" command="$(find xacro)/xacro.py $(find mpc_ros_description)/urdf/holonomic/holonomic.urdf.xacro" if="$(eval model == 'holonomic')"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="empty.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- Load ros_control controller configuration parameters -->
    <rosparam file="$(find mpc_ros_description)/config/ctrl_ackermann_steering_controller.yaml" command="load" />
    <rosparam file="$(find mpc_ros_description)/config/ctrl_gains.yaml" command="load"/>
    <rosparam file="$(find mpc_ros_description)/config/ctrl_joint_state_publisher.yaml" command="load" />
    <rosparam file="$(find mpc_ros_description)/config/ctrl_steer_bot_hardware_gazebo.yaml" command="load"/>

    <!-- Spawn the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" 
        args="joint_state_publisher ackermann_steering_controller"
        output="screen" respawn="false" if="$(eval model == 'ackermann')"/>
    <node pkg="controller_manager" type="spawner" name="controller_spawner" 
        args="joint_state_publisher ackermann_steering_controller"
        output="screen" respawn="false" if="$(eval model == 'bicycle')"/>


    <!-- Launch a rqt steering GUI for publishing to /steer_bot/ackermann_steering_controller/cmd_vel -->
    <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
        <param name="default_topic" value="ackermann_steering_controller/cmd_vel"  if="$(eval model == 'ackermann')"/>
        <param name="default_topic" value="/cmd_vel"  if="$(eval model == 'differential_drive')"/>
        <param name="default_topic" value="ackermann_steering_controller/cmd_vel"  if="$(eval model == 'bicycle')"/>
        <param name="default_topic" value="/cmd_vel"  if="$(eval model == 'holonomic')"/>
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model ackermann_bot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'ackermann')"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model differential_drive_bot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'differential_drive')"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model bicycle_bot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'bicycle')"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model holonomic_bot -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description" if="$(eval model == 'holonomic')"/>
      
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
    </node>


</launch>